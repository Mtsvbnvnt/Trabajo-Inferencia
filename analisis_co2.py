

from sklearn.linear_model import LinearRegression
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import shapiro, normaltest
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import plotly.express as px

# =====================
# Cargar y preparar datos
# =====================
df = pd.read_csv("co2_pcap_cons.csv")
df_numeric = df.drop(columns='country').apply(pd.to_numeric, errors='coerce')
df_numeric['country'] = df['country']
df_long = df_numeric.melt(id_vars='country', var_name='year', value_name='co2_per_capita')
df_long['year'] = pd.to_numeric(df_long['year'], errors='coerce')
df_long = df_long.dropna(subset=['co2_per_capita'])

# =====================
# Preparar modelo ML
# =====================
df_ml = df_numeric.melt(id_vars='country', var_name='year', value_name='co2')
df_ml['year'] = df_ml['year'].astype(int)
df_ml.dropna(inplace=True)

le = LabelEncoder()
df_ml['country_encoded'] = le.fit_transform(df_ml['country'])

X = df_ml[['year', 'country_encoded']]
y = df_ml['co2']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)


# =====================
# Funciones de visualizaci√≥n
# =====================
def show_menu():
    print("\n--- Men√∫ de An√°lisis de CO‚ÇÇ ---")
    print("1. Histograma por a√±o")
    print("2. Boxplot por a√±os espec√≠ficos")
    print("3. Matriz de correlaci√≥n")
    print("4. Evoluci√≥n por pa√≠s")
    print("5. Top 10 pa√≠ses por a√±o")
    print("6. Promedio hist√≥rico top 15")
    print("7. Mapa interactivo por a√±o")
    print("8. Predicci√≥n LINEAL: pa√≠s y a√±o (para extrapolar)")
    print("0. Salir")

def plot_histograma(year):
    data = df_numeric[str(year)].dropna()
    plt.figure(figsize=(10, 5))
    sns.histplot(data, bins=30, kde=True)
    plt.title(f'Histograma de CO‚ÇÇ per c√°pita ({year})')
    plt.xlabel('Toneladas per c√°pita')
    plt.tight_layout()
    plt.show()

def plot_boxplot(years):
    plt.figure(figsize=(10, 6))
    sns.boxplot(data=df_numeric[years])
    plt.title(f'Boxplot CO‚ÇÇ per c√°pita ({", ".join(years)})')
    plt.ylabel('Toneladas per c√°pita')
    plt.tight_layout()
    plt.show()

def plot_correlacion():
    subset = df_numeric[['2000', '2010', '2020', '2022']]
    corr = subset.corr()
    plt.figure(figsize=(8, 6))
    sns.heatmap(corr, annot=True, cmap='coolwarm')
    plt.title("Matriz de correlaci√≥n")
    plt.tight_layout()
    plt.show()

def plot_evolucion(paises):
    data = df_long[df_long['country'].isin(paises)]
    plt.figure(figsize=(12, 6))
    for pais in paises:
        subset = data[data['country'] == pais]
        plt.plot(subset['year'], subset['co2_per_capita'], label=pais)
    plt.legend()
    plt.title("Evoluci√≥n CO‚ÇÇ per c√°pita")
    plt.xlabel("A√±o")
    plt.ylabel("Toneladas per c√°pita")
    plt.tight_layout()
    plt.show()

def plot_top10(year):
    data = df_long[df_long['year'] == year].nlargest(10, 'co2_per_capita')
    plt.figure(figsize=(10, 6))
    sns.barplot(data=data, y='country', x='co2_per_capita')
    plt.title(f"Top 10 CO‚ÇÇ per c√°pita en {year}")
    plt.tight_layout()
    plt.show()

def plot_promedio_top15():
    mean_data = df_long.groupby('country')['co2_per_capita'].mean().sort_values(ascending=False).head(15)
    plt.figure(figsize=(12, 6))
    sns.barplot(x=mean_data.values, y=mean_data.index)
    plt.title("Top 15 pa√≠ses por promedio hist√≥rico")
    plt.tight_layout()
    plt.show()

def plot_mapa_interactivo(year):
    data = df_long[df_long['year'] == year]
    fig = px.choropleth(
        data, locations="country", locationmode="country names",
        color="co2_per_capita", hover_name="country",
        color_continuous_scale="OrRd",
        title=f"Mapa interactivo de CO‚ÇÇ per c√°pita ({year})"
    )
    fig.show()

def predecir_lineal():
    pais_usuario = input("üîé Ingresa el pa√≠s para predecir (ej. Chile): ")
    a√±o_usuario = int(input("üìÖ Ingresa el a√±o a predecir (Desde 2023 en adelante): "))
    # Verificar que el a√±o sea mayor al √∫ltimo a√±o registrado
    max_anio = df_ml['year'].max()
    if a√±o_usuario <= max_anio:
        print(f"‚ö†Ô∏è Este modelo est√° dise√±ado para predecir desde {max_anio + 1} en adelante.")
        return

    # Filtrar los datos solo del pa√≠s
    df_pais = df_ml[df_ml['country'] == pais_usuario]

    if df_pais.empty:
        print(f"‚ö†Ô∏è El pa√≠s '{pais_usuario}' no se encuentra en la base de datos.")
        return
    # Filtrar los datos desde 1980
    df_pais = df_pais[df_pais['year'] >= 1980]


    # Entrenar modelo lineal solo con ese pa√≠s
    X = df_pais[['year']]
    y = df_pais['co2']
    modelo = LinearRegression()
    modelo.fit(X, y)

    # Predecir
    prediccion = modelo.predict([[a√±o_usuario]])
    print(f"üìà Predicci√≥n LINEAL de CO‚ÇÇ per c√°pita para {pais_usuario} en {a√±o_usuario}: {round(prediccion[0], 3)} toneladas")


# =====================
# Ejecutar men√∫
# =====================
if __name__ == "__main__":
    while True:
        show_menu()
        opcion = input("Selecciona una opci√≥n: ")

        if opcion == "0":
            print("Saliendo...")
            break
        elif opcion == "1":
            a√±o = input("A√±o del histograma: ")
            plot_histograma(a√±o)
        elif opcion == "2":
            a√±os = input("A√±os separados por coma (ej: 2000,2010,2020): ").split(',')
            plot_boxplot([a.strip() for a in a√±os])
        elif opcion == "3":
            plot_correlacion()
        elif opcion == "4":
            paises = input("Pa√≠ses separados por coma (ej: Chile,China): ").split(',')
            plot_evolucion([p.strip() for p in paises])
        elif opcion == "5":
            a√±o = int(input("A√±o del Top 10: "))
            plot_top10(a√±o)
        elif opcion == "6":
            plot_promedio_top15()
        elif opcion == "7":
            a√±o = int(input("A√±o del mapa interactivo: "))
            plot_mapa_interactivo(a√±o)
        elif opcion == "8":
             predecir_lineal()
    
        else:
            print("Opci√≥n no v√°lida.")
